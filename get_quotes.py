import MetaTrader5 as mt5
import pandas as pd
import os
import subprocess
import time
from datetime import datetime

# -----------------------------------------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
# -----------------------------------------------------------
symbol = input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä XAUUSD): ").strip().upper()
date_from = input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD): ").strip()
date_to = input("–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD): ").strip()

# -----------------------------------------------------------
# –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –æ—Ç 1M –¥–æ 1D
# -----------------------------------------------------------
TIMEFRAMES = {
    "M1": mt5.TIMEFRAME_M1,
    "M2": mt5.TIMEFRAME_M2,
    "M3": mt5.TIMEFRAME_M3,
    "M4": mt5.TIMEFRAME_M4,
    "M5": mt5.TIMEFRAME_M5,
    "M6": mt5.TIMEFRAME_M6,
    "M10": mt5.TIMEFRAME_M10,
    "M12": mt5.TIMEFRAME_M12,
    "M15": mt5.TIMEFRAME_M15,
    "M20": mt5.TIMEFRAME_M20,
    "M30": mt5.TIMEFRAME_M30,
    "H1": mt5.TIMEFRAME_H1,
    "H2": mt5.TIMEFRAME_H2,
    "H3": mt5.TIMEFRAME_H3,
    "H4": mt5.TIMEFRAME_H4,
    "H6": mt5.TIMEFRAME_H6,
    "H8": mt5.TIMEFRAME_H8,
    "H12": mt5.TIMEFRAME_H12,
    "D1": mt5.TIMEFRAME_D1
}

# -----------------------------------------------------------
# –ü—É—Ç—å –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—É (—É–∫–∞–∂–∏, –µ—Å–ª–∏ MT5 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ)
# -----------------------------------------------------------
MT5_PATH = r"C:\Program Files\MetaTrader 5\terminal64.exe"

# -----------------------------------------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ MT5 –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
# -----------------------------------------------------------
def ensure_mt5_running():
    if not mt5.initialize():
        print("‚ö†Ô∏è MT5 –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–±—É—é –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é...")
        subprocess.Popen([MT5_PATH])
        time.sleep(7)  # –¥–∞—ë–º MT5 –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
        if not mt5.initialize():
            raise ConnectionError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MetaTrader 5.")
    print("‚úÖ MetaTrader 5 –ø–æ–¥–∫–ª—é—á–µ–Ω.")

# -----------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏
# -----------------------------------------------------------
def export_quotes(symbol: str, date_from: str, date_to: str):
    from_date = pd.Timestamp(date_from)
    to_date = pd.Timestamp(date_to)

    quotes_folder = os.path.join(os.path.dirname(__file__), "quotes_data")
    os.makedirs(quotes_folder, exist_ok=True)

    total_frames = len(TIMEFRAMES)
    done = 0

    for tf_name, tf_const in TIMEFRAMES.items():
        done += 1
        print(f"\n[{done}/{total_frames}] üìà {symbol} {tf_name}")

        rates = mt5.copy_rates_range(symbol, tf_const, from_date, to_date)
        if rates is None or len(rates) == 0:
            print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} {tf_name}")
            continue

        df = pd.DataFrame(rates)
        df["time"] = pd.to_datetime(df["time"], unit="s")

        file_name = f"{symbol}_{tf_name}_{date_from}_to_{date_to}.csv"
        file_path = os.path.join(quotes_folder, file_name)
        df.to_csv(file_path, index=False)

        print(f"‚úÖ {len(df)} —Å—Ç—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {file_path}")

# -----------------------------------------------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# -----------------------------------------------------------
def main():
    ensure_mt5_running()
    try:
        export_quotes(symbol, date_from, date_to)
    finally:
        mt5.shutdown()
        print("\nüèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ.")

if __name__ == "__main__":
    main()
